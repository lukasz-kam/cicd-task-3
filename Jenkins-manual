pipeline {
    agent none

    parameters {
        choice(name: 'ENVIRONMENT', choices: ['main', 'dev'], description: 'Select the environment')
        string(name: 'IMAGE_TAG', defaultValue: 'v1.0', description: 'Enter the tag for the docker image')
    }
    environment {
        TRIVY_OUTPUT_FILE = "trivy_result-${env.BUILD_NUMBER}"
        HADOLINT_OUTPUT_FILE = "hadolint_result-${env.BUILD_NUMBER}"
    }

    stages {
        stage('Checkout, build and test') {
            agent {
                docker {
                    image 'node:alpine3.20'
                }
            }
            stages {
                stage('Build'){
                    steps {
                        script {
                            echo "Build started..."
                            sh 'chmod +x ./scripts/build.sh'
                            sh '. ./scripts/build.sh'
                        }
                    }
                }
                stage('Test'){
                    steps {
                        script {
                            echo "Test started..."
                            sh 'chmod +x ./scripts/test.sh'
                            sh '. ./scripts/test.sh'
                        }
                    }
                }
            }
        }
        stage('Dockerfile lint'){
            agent {
                docker {
                    image 'hadolint/hadolint:latest-alpine'
                }
            }
            steps {
                sh "hadolint -f json Dockerfile > ${HADOLINT_OUTPUT_FILE}"
            }
            post {
                failure {
                    sh "cat ${HADOLINT_OUTPUT_FILE}"
                    archiveArtifacts artifacts: "${HADOLINT_OUTPUT_FILE}", fingerprint: true
                }
            }
        }
        stage('Docker build, deploy and cleanup'){
            agent {
                docker {
                    image 'lucascx/trivy-docker:v1.0'
                    args '-v /var/run/docker.sock:/var/run/docker.sock --user 1000:999'
                }
            }
            environment {
                HOME = "${env.WORKSPACE}"
                PORT = "${params.ENVIRONMENT == 'main' ? '3000' : (params.ENVIRONMENT == 'dev' ? '3001' : '5000')}"
                DOCKER_USER = 'lucascx'
                IMAGE_NAME = "node${params.ENVIRONMENT}:${params.IMAGE_TAG}"
            }
            stages {
                stage('Build'){
                    steps {
                        script {
                            sh "docker build -t $IMAGE_NAME ."
                        }
                    }
                }
                stage('Trivy scan'){
                    steps {
                        script {
                            sh "trivy image --output ${TRIVY_OUTPUT_FILE} ${IMAGE_NAME}"
                            archiveArtifacts artifacts: "${TRIVY_OUTPUT_FILE}", allowEmptyArchive: true
                        }
                    }
                }
                stage('Push to dockerhub'){
                    steps {
                        script {
                            sh "docker tag $IMAGE_NAME $DOCKER_USER/$IMAGE_NAME"
                            withDockerRegistry([credentialsId: 'docker-lucascx', url: '']) {
                                sh "docker push $DOCKER_USER/$IMAGE_NAME"
                            }
                        }
                    }
                }
                stage('Deploy'){
                    steps {
                        script {
                            sh "docker ps -aq --filter label=env=${params.ENVIRONMENT} | xargs -r docker rm -f"
                            sh "docker run -d --label env=${params.ENVIRONMENT} --expose ${PORT} -p ${PORT}:3000 $IMAGE_NAME"
                        }
                    }
                }
                stage('Cleanup'){
                    steps {
                        script {
                            sh "docker image prune -f 2> /dev/null"
                            sh "docker volume prune -f 2> /dev/null"
                        }
                    }
                }
            }
        }
    }
}